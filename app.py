import numpy as np
import streamlit as st
import pandas as pd
import datetime
import plotly.graph_objects as go
import base64
import time
import tensorflow

st.set_page_config(
page_title=" DEEP WIND ",
page_icon="🚩"
)
old_models =tensorflow.keras.models.load_model('model.h5')


# set background, use base64 to read local file
def get_base64_of_bin_file(bin_file):
    """
    function to read png file 
    ----------
    bin_file: png -> the background image in local folder
    """
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def set_png_as_page_bg(png_file):
    """
    function to display png as bg
    ----------
    png_file: png -> the background image in local folder
    """
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = '''
    <style>
    body {
    background-image: url("data:image/png;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % bin_str
    
    st.markdown(page_bg_img, unsafe_allow_html=True)
    return



set_png_as_page_bg('gr.gif')
     
  
def home():
    return "welcome"


#@app.route('/predict', methods=['POST'])
def predict(temperature,pressure,wind_speed,wind_direction):
    values=np.array([[temperature,pressure,wind_speed,wind_direction]])
    prediction=old_models.predict(values.reshape(-1,1,4), batch_size=1)
    print(prediction)
    return prediction

def main():
   st.sidebar.markdown("<h1 style='text-align: center; color: black;'>🧭 Navigation Bar 🧭</h1>", unsafe_allow_html=True)
   nav = st.sidebar.radio("",["Home 🏡","User defined Prediction📟","Forecasting 📊"])
   if nav == "Home 🏡":
    st.markdown("<h1 style ='color:black; text_align:center;font-family:times new roman;font-size:20pt; font-weight: bold;'>DEEP WINDS ⚒️</h1>", unsafe_allow_html=True)
    st.markdown("<h1 style=' color:brown; text_align:center;font-weight: bold;font-size:19pt;'>Made by Quad Techies with ❤️</h1>", unsafe_allow_html=True)
    st.markdown("<h1 style ='color:violet	; text_align:center;font-family:times new roman;font-weight: bold;font-size:18pt;'>WIND POWER PREDICTION DL WEB-APP</h1>", unsafe_allow_html=True)
   
    
   if nav == "User defined Prediction📟":
     set_png_as_page_bg('gra (1).jpg')
     st.markdown("<h1 style='text-align: center; color: green;'>User Input Parameters 💻️</h1>", unsafe_allow_html=True)
     temperature = st.slider('Temperature ⛅🌞🌧️ [°C]', -15, 1, 50)
     pressure = st.slider('Pressure  ⚡ [atm]️', 0.9, 1.0, 1.0)
     wind_speed = st.slider('Wind Speed  🌬️ [m/s]', 1, 1, 27)
     wind_direction = st.slider('Wind Direction  🚩🌀 [deg]', 0, 1, 360)
     result = ""
     if st.button("Predict"):
         result = predict(temperature,pressure,wind_speed,wind_direction)
         st.balloons()  
     st.success('Predicted Power is {} kW'.format(result)) 
     
     


   if nav == "Forecasting 📊":
        set_png_as_page_bg('04.gif')
        st.markdown("<h1 style='text-align: center; color:black ;'>⚡FORECASTING⚡</h1>", unsafe_allow_html=True)
        
    # Setup file upload
        st.markdown("<h1 style='text-align:center; color:white;background-color:black;font-size:14pt'>📂 Upload your CSV or Excel file. (200MB max) 📂</h1>", unsafe_allow_html=True)
        uploaded_file = st.file_uploader(label="",type=['csv', 'xlsx'])
    
        global df
        if uploaded_file is not None:
           print(uploaded_file)
           st.markdown("<h1 style='text-align:center; color:black;background-color:lightgreen;font-size:14pt'>📂 File upload successful 📂</h1>", unsafe_allow_html=True)
           print("hello")
    
           try:
              df = pd.read_csv(uploaded_file)
              st.write(df)
          
           except Exception as e:       
             df = pd.read_excel(uploaded_file)       
             st.write(df)
           
           
           st.markdown("<h1 style='text-align: center; color:black ;background-color:powderblue;font-size:14pt'>📈 INPUT DATA 📈</h1>", unsafe_allow_html=True)
           
           trace = go.Scatter(
        x = df['DateTime'],
        y = df['Power generated by system | (kW)'],
        mode = 'lines',
        name = 'Data'
    )
           layout = go.Layout(
        title = "",
        xaxis = {'title' : "Date"},
        yaxis = {'title' : "Power generated by system | (kW)"}
    )
           fig = go.Figure(data=[trace], layout=layout)
            #fig.show()
           st.write(fig)
            
    
           df1=df.reset_index()['Power generated by system | (kW)']
           import matplotlib.pyplot as plt
           st.write("\n")
           st.markdown("<h1 style='text-align: center; color:black ;background-color:powderblue;font-size:14pt'>📈 INPUT DATA IN TERMS OF NO. OF HOURS 📈 </h1>", unsafe_allow_html=True)
           trace = go.Scatter(
        x = df1.index,
        y = df['Power generated by system | (kW)'],
        mode = 'lines',
        name = 'Data'
    )
           layout = go.Layout(
        title = "",
        xaxis = {'title' : "No. of hours"},
        yaxis = {'title' : "Power generated by system (kW)"}
    )
           
           fig = go.Figure(data=[trace], layout=layout)
            #fig.show()
           st.write(fig)
           from sklearn.preprocessing import MinMaxScaler
           scaler=MinMaxScaler(feature_range=(0,1))
           df1=scaler.fit_transform(np.array(df1).reshape(-1,1))
      ##splitting dataset into train and test split
           training_size=int(len(df1)*0.65)
           test_size=len(df1)-training_size
           train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]
          
           import numpy
    # convert an array of values into a dataset matrix
    # convert an array of values into a dataset matrix
           def create_dataset(dataset, time_step=1):
    	       dataX, dataY = [], []
    	       for i in range(len(dataset)-time_step-1):
    		       a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 
    		       dataX.append(a)
    		       dataY.append(dataset[i + time_step, 0])
    	       return numpy.array(dataX), numpy.array(dataY)
    # reshape into X=t,t+1,t+2,t+3 and Y=t+4
           time_step = 30
           X_train, y_train = create_dataset(train_data, time_step)
           X_test, ytest = create_dataset(test_data, time_step)
    # reshape input to be [samples, time steps, features] which is required for LSTM
           X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
           X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)
    ### Create the BILSTM model
           from tensorflow.keras.models import Sequential
           from tensorflow.keras.layers import Dense
           from tensorflow.keras.layers import LSTM
           from tensorflow.keras.layers import Bidirectional
           model = Sequential()
           model.add(Bidirectional(LSTM(250, input_shape=(1, 30))))
           model.add(Dense(1))
           model.compile(loss='mae', optimizer='adam')
           model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=10,batch_size=64,verbose=1)
           import tensorflow as tf
    ### Lets Do the prediction and check performance metrics
           train_predict=model.predict(X_train)
           test_predict=model.predict(X_test)
    ##Transformback to original form
           train_predict=scaler.inverse_transform(train_predict)
           test_predict=scaler.inverse_transform(test_predict)
    ### Calculate RMSE performance metrics
           import math
           from sklearn.metrics import mean_squared_error
           math.sqrt(mean_squared_error(y_train,train_predict))
    ### Test Data RMSEmath.sqrt(mean_squared_error(ytest,test_predict))
    ### Plotting 
     # shift train predictions for plotting
           look_back=30
           trainPredictPlot = numpy.empty_like(df1)
           trainPredictPlot[:, :] = np.nan
           trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
    # shift test predictions for plotting
           testPredictPlot = numpy.empty_like(df1)
           testPredictPlot[:, :] = numpy.nan
           testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict
    # plot baseline and predictions
           st.markdown("<h1 style='text-align: center; color:black ;background-color:powderblue;font-size:14pt'>📈 TRAIN AND TEST DATA 📈 </h1>", unsafe_allow_html=True)
           
           #plt.plot(scaler.inverse_transform(df1))
           plt.plot(scaler.inverse_transform(df1), color="blue", linewidth=1, linestyle="-")
           plt.xlabel('No. of hours')
    # Set the y axis label of the current axis.
           plt.ylabel('Power generated by system | (kW)')
           plt.plot(trainPredictPlot,label='Train Data',color="black",linewidth=2, linestyle="--")
           plt.plot(testPredictPlot,label='Test Data',color="orange",linewidth=2, linestyle="--")
           plt.legend(loc="upper left")
      #plt.show()
           st.pyplot(plt)
          
           x_input=test_data[len(test_data)-30:].reshape(1,-1)
           temp_input=list(x_input)
           temp_input=temp_input[0].tolist()
    # demonstrate prediction for next 24 hours
           from numpy import array
           lst_output=[]
           n_steps=30
           i=0
           while(i<24):
              if(len(temp_input)>30):
                #print(temp_input)
                x_input=np.array(temp_input[1:])
                x_input=x_input.reshape(1,-1)
                x_input = x_input.reshape((1, n_steps, 1))
                yhat = model.predict(x_input, verbose=0)
                temp_input.extend(yhat[0].tolist())
                temp_input=temp_input[1:]
                lst_output.extend(yhat.tolist())
                i=i+1
              else:
                x_input = x_input.reshape((1, n_steps,1))
                yhat = model.predict(x_input, verbose=0)
                print(yhat[0])
                temp_input.extend(yhat[0].tolist())
                print(len(temp_input))
                lst_output.extend(yhat.tolist())
                i=i+1
        
    
           print(lst_output)
           day_new=np.arange(1,31)
           day_pred=np.arange(len(df1),len(df1)+24)
           import matplotlib.pyplot as plt
           print(len(df1))
           progress=st.progress(0)
           for i in range(100):
               time.sleep(0.1)
               progress.progress(i+1)
           st.balloons()
           st.markdown("<h1 style='text-align: center; color:black ;background-color:powderblue;font-size:14pt'>📈 PREDICTED RESULTS FOR NEXT 24 HOURS 📈</h1>", unsafe_allow_html=True)
           plt.plot(day_pred,scaler.inverse_transform(lst_output),color="green",linewidth=1.5, linestyle="--",marker='*',markerfacecolor='yellow', markersize=7)
           plt.legend('GTTP',loc="upper left")
           
           plt.xlabel('No. of hours')
    # Set the y axis label of the current axis.
           plt.ylabel('Power generated by system | (kW)')
           
           st.pyplot(plt)
           st.markdown("<h1 style='text-align: center; color:black ;background-color:yellow;font-size:14pt'>🏷️ G-Given Data, \n🏷️T-Train Data, \n🏷️T-Test Data, \n🏷️P-Predicted Results</h1>", unsafe_allow_html=True)
           st.write(scaler.inverse_transform(lst_output))

if __name__ == "__main__":
    main()
